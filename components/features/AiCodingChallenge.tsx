/**
 * @file AiCodingChallenge.tsx
 * @description This file contains the implementation of the AI Coding Challenge feature.
 * It allows users to generate a coding challenge, write a solution, run it against test cases in a sandboxed environment,
 * and receive AI-powered feedback on their code.
 * @copyright James Burvel O'Callaghan III
 * @license Apache-2.0
 */

import React, { useState, useCallback, useEffect } from 'react';
import { useNotification } from '../../contexts/NotificationContext';
import { useWorkerPool } from '../../hooks/useWorkerPool';
import { BeakerIcon, SparklesIcon } from '../icons';
import { LoadingSpinner, MarkdownRenderer } from '../shared';
import { CodeEditor } from '../composite/CodeEditor'; // Assuming a composite component

// These types would ideally live in a central `types.ts` file.

/**
 * @typedef {object} TestCase
 * @description Represents a single test case for a coding challenge.
 * @property {any[]} input - An array of arguments to be passed to the user's function.
 * @property {*} expected - The expected output for the given input.
 */
interface TestCase {
  input: any[];
  expected: any;
}

/**
 * @typedef {object} CodingChallenge
 * @description Represents the structured data for a coding challenge generated by the AI.
 * @property {string} title - The title of the challenge.
 * @property {string} description - A detailed description of the problem in Markdown format.
 * @property {string} functionStub - A boilerplate function stub for the user to start with.
 * @property {TestCase[]} testCases - An array of test cases to validate the user's solution.
 */
interface CodingChallenge {
  title: string;
  description: string;
  functionStub: string;
  testCases: TestCase[];
}

/**
 * @typedef {object} TestResult
 * @description Represents the result of running a single test case.
 * @augments TestCase
 * @property {*} output - The actual output from the user's function.
 * @property {boolean} passed - Whether the actual output matches the expected output.
 * @property {string | null} error - Any error message produced during execution.
 */
interface TestResult extends TestCase {
  output: any;
  passed: boolean;
  error: string | null;
}

/**
 * @component AiCodingChallenge
 * @description An interactive component for practicing coding skills. It generates a challenge,
 * provides a code editor, runs tests in a sandboxed web worker, and offers AI-powered feedback.
 * @performance Offloads code execution and AI interaction to a Web Worker pool to prevent blocking the main UI thread.
 * @security User-submitted code is executed within a Web Worker, providing a basic sandbox. For a production environment, a more robust sandboxing solution is recommended.
 * @example <AiCodingChallenge />
 */
export const AiCodingChallenge: React.FC = () => {
  const [challenge, setChallenge] = useState<CodingChallenge | null>(null);
  const [userCode, setUserCode] = useState('');
  const [testResults, setTestResults] = useState<TestResult[]>([]);
  const [aiFeedback, setAiFeedback] = useState('');
  const [isLoading, setIsLoading] = useState<'challenge' | 'tests' | 'feedback' | null>('challenge');
  const [activeTab, setActiveTab] = useState<'tests' | 'feedback'>('tests');
  const { addNotification } = useNotification();
  const workerPool = useWorkerPool();

  /**
   * @function handleGenerateChallenge
   * @description Fetches a new coding challenge from the AI service via the worker pool.
   * @param {string | null} [topic='general'] - An optional topic for the coding challenge.
   * @returns {Promise<void>}
   */
  const handleGenerateChallenge = useCallback(async (topic: string | null = 'general') => {
    setIsLoading('challenge');
    setChallenge(null);
    setUserCode('');
    setTestResults([]);
    setAiFeedback('');

    try {
      const newChallenge = await workerPool.submitTask<CodingChallenge>('generate-coding-challenge', { topic });
      setChallenge(newChallenge);
      setUserCode(newChallenge.functionStub);
      addNotification('New challenge generated!', 'success');
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to generate challenge.';
      addNotification(errorMessage, 'error');
    } finally {
      setIsLoading(null);
    }
  }, [workerPool, addNotification]);

  useEffect(() => {
    handleGenerateChallenge();
  }, [handleGenerateChallenge]);

  /**
   * @function handleRunTests
   * @description Executes the user's code against test cases in a sandboxed Web Worker.
   * @returns {Promise<void>}
   */
  const handleRunTests = useCallback(async () => {
    if (!challenge) return;
    setIsLoading('tests');
    setActiveTab('tests');

    try {
      const results = await workerPool.submitTask<TestResult[]>('run-challenge-tests', { 
        code: userCode, 
        testCases: challenge.testCases 
      });
      setTestResults(results);
      const passedCount = results.filter(r => r.passed).length;
      addNotification(`${passedCount} / ${results.length} tests passed.`, passedCount === results.length ? 'success' : 'info');
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to run tests.';
      addNotification(errorMessage, 'error');
    } finally {
      setIsLoading(null);
    }
  }, [userCode, challenge, workerPool, addNotification]);

  /**
   * @function handleGetFeedback
   * @description Requests AI-powered feedback on the user's solution via the worker pool.
   * @returns {Promise<void>}
   */
  const handleGetFeedback = useCallback(async () => {
    if (!challenge) return;
    setIsLoading('feedback');
    setActiveTab('feedback');
    setAiFeedback('');

    try {
      const stream = workerPool.streamTask('get-solution-feedback', {
        challengeDescription: challenge.description,
        userSolution: userCode,
      });

      let fullResponse = '';
      for await (const chunk of stream) {
        fullResponse += chunk;
        setAiFeedback(fullResponse);
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to get feedback.';
      addNotification(errorMessage, 'error');
    } finally {
      setIsLoading(null);
    }
  }, [userCode, challenge, workerPool, addNotification]);

  if (isLoading === 'challenge' && !challenge) {
    return <div className="h-full flex items-center justify-center"><LoadingSpinner text="Generating a new challenge..." /></div>;
  }

  return (
    <div className="h-full flex flex-col p-4 sm:p-6 lg:p-8 text-text-primary">
      <header className="mb-6 flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold flex items-center">
            <BeakerIcon />
            <span className="ml-3">{challenge?.title || 'AI Coding Challenge'}</span>
          </h1>
          <p className="text-text-secondary mt-1">Generate a unique coding problem to test your skills.</p>
        </div>
        <button onClick={() => handleGenerateChallenge()} disabled={isLoading === 'challenge'} className="btn-primary flex items-center justify-center px-6 py-2">
          {isLoading === 'challenge' ? <LoadingSpinner/> : 'Generate New'}
        </button>
      </header>
      <div className="flex-grow grid grid-cols-1 lg:grid-cols-2 gap-6 min-h-0">
        <div className="flex flex-col bg-surface border border-border rounded-lg overflow-y-auto p-4">
          <MarkdownRenderer content={challenge?.description || ''} />
        </div>
        <div className="flex flex-col gap-4 min-h-0">
          <div className="flex-grow flex flex-col min-h-0">
            <label className="text-sm font-medium mb-2 text-text-secondary">Your Solution</label>
            <CodeEditor
              value={userCode}
              onValueChange={setUserCode}
              language='javascript'
              className="flex-grow !h-full"
            />
          </div>
          <div className="flex gap-2">
            <button onClick={handleRunTests} disabled={!!isLoading} className="btn-primary flex-1 py-2 flex items-center justify-center">{isLoading === 'tests' ? <LoadingSpinner /> : 'Run Tests'}</button>
            <button onClick={handleGetFeedback} disabled={!!isLoading} className="bg-purple-600 text-white font-bold rounded-md hover:opacity-90 transition-all disabled:opacity-50 shadow-md flex-1 py-2 flex items-center justify-center gap-2">{isLoading === 'feedback' ? <LoadingSpinner /> : <><SparklesIcon /> AI Feedback</>}</button>
          </div>
          <div className="flex-grow flex flex-col bg-surface border border-border rounded-lg overflow-hidden min-h-[200px]">
            <div className="flex border-b border-border">
              <button onClick={() => setActiveTab('tests')} className={`px-4 py-2 text-sm ${activeTab === 'tests' ? 'bg-background text-primary font-semibold' : 'text-text-secondary'}`}>Test Results</button>
              <button onClick={() => setActiveTab('feedback')} className={`px-4 py-2 text-sm ${activeTab === 'feedback' ? 'bg-background text-primary font-semibold' : 'text-text-secondary'}`}>AI Feedback</button>
            </div>
            <div className="p-4 overflow-y-auto">
              {activeTab === 'tests' && (
                isLoading === 'tests' ? <div className="flex justify-center"><LoadingSpinner /></div> : (
                  <div className="space-y-2 text-sm">
                    {testResults.map((result, i) => (
                      <div key={i} className={`p-2 rounded border ${result.passed ? 'border-green-500/30 bg-green-500/10' : 'border-red-500/30 bg-red-500/10'}`}>
                        <p className="font-bold flex items-center gap-2">{result.passed ? '✅' : '❌'} Test Case #{i + 1}</p>
                        <p className="font-mono text-xs">Input: {JSON.stringify(result.input)}</p>
                        <p className="font-mono text-xs">Expected: {JSON.stringify(result.expected)}</p>
                        {result.error ? <p className="font-mono text-xs text-red-500">Error: {result.error}</p> : <p className="font-mono text-xs">Output: {JSON.stringify(result.output)}</p>}
                      </div>
                    ))}
                  </div>
                )
              )}
              {activeTab === 'feedback' && (
                isLoading === 'feedback' ? <div className="flex justify-center"><LoadingSpinner /></div> : <MarkdownRenderer content={aiFeedback} />
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
