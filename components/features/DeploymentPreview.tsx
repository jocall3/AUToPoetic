/**
 * @license
 * Copyright James Burvel O'Callaghan III
 * President Citibank Demo Business Inc.
 * SPDX-License-Identifier: Apache-2.0
 */

import React, { useState, useEffect, useRef } from 'react';
import { getAllFiles } from '../../services';
// In the new architecture, services like dbService would be injected
// via a dependency injection container, likely accessed through a custom hook,
// e.g., const { dbService } = useServices();
import type { GeneratedFile } from '../../types';
import { CloudIcon } from '../icons';
import { LoadingSpinner } from './shared';

/**
 * @module components/features/DeploymentPreview
 * @description
 * A feature component that provides a live, sandboxed preview of a static site
 * generated by the `AiFeatureBuilder`. It fetches the generated files from the local
 * IndexedDB, constructs a preview environment within an iframe, and handles asset loading
 * by creating and injecting Blob URLs.
 *
 * @performance
 * This component performs file reading from IndexedDB and in-memory Blob creation on the main thread.
 * For a large number of generated files (e.g., >50), this could introduce minor UI stutter.
 * For significant workloads, the file processing and HTML parsing logic could be offloaded to a
 * Web Worker managed by the `WorkerPoolManager` to ensure a non-blocking user experience.
 * Blob URL creation is relatively fast, but cleanup is essential to prevent memory leaks.
 *
 * @security
 * The component renders user-generated and AI-generated content within a sandboxed `<iframe>`
 * by using the `srcdoc` attribute. This provides a strong security boundary, preventing the
 * previewed content from accessing the parent window's DOM or cookies, thus mitigating XSS risks.
 * The `sandbox="allow-scripts"` attribute is used to allow JavaScript execution within the preview,
 * which is necessary for interactive components. Without `allow-same-origin`, the iframe content
 * is treated as being from a unique origin.
 *
 * @example
 * ```tsx
 * <DeploymentPreview />
 * ```
 *
 * @see {@link AiFeatureBuilder} - The component that generates files for this previewer.
 * @see {@link services/dbService} - The service used to retrieve generated files from IndexedDB.
 */
export const DeploymentPreview: React.FC = () => {
    const [files, setFiles] = useState<GeneratedFile[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState('');
    const iframeRef = useRef<HTMLIFrameElement>(null);
    const blobUrlsRef = useRef<string[]>([]);

    useEffect(() => {
        /**
         * Asynchronously loads generated files from the database and renders them into the iframe.
         * @returns {Promise<void>}
         * @private
         */
        const loadAndRender = async () => {
            setIsLoading(true);
            setError('');
            try {
                const allFiles = await getAllFiles();
                if (allFiles.length === 0) {
                    setError('No files generated by AI Feature Builder found.');
                    setFiles([]);
                    return;
                }
                setFiles(allFiles);

                const indexHtmlFile = allFiles.find(f => f.filePath.endsWith('index.html'));
                if (!indexHtmlFile) {
                    setError('No index.html file found in the generated files.');
                    return;
                }

                let content = indexHtmlFile.content;

                // Create blob URLs for all assets and replace relative paths
                const blobUrlMap = new Map<string, string>();
                for (const file of allFiles) {
                    if (file.filePath.endsWith('.html')) continue;

                    const mimeType = file.filePath.endsWith('.css') ? 'text/css' : 'application/javascript';
                    const blob = new Blob([file.content], { type: mimeType });
                    const blobUrl = URL.createObjectURL(blob);
                    blobUrlMap.set(file.filePath, blobUrl);
                    blobUrlsRef.current.push(blobUrl);
                }

                // Replace relative paths in index.html with their blob URL counterparts
                content = content.replace(/(href|src)=["'](\.\/)?([^"']+)["']/g, (match, attr, prefix, path) => {
                    const blobUrl = blobUrlMap.get(path);
                    return blobUrl ? `${attr}="${blobUrl}"` : match;
                });

                if (iframeRef.current) {
                    iframeRef.current.srcdoc = content;
                }

            } catch (err) {
                setError(err instanceof Error ? err.message : 'Failed to load files.');
            } finally {
                setIsLoading(false);
            }
        };

        loadAndRender();

        // Cleanup function to revoke blob URLs on component unmount to prevent memory leaks.
        return () => {
            blobUrlsRef.current.forEach(url => URL.revokeObjectURL(url));
            blobUrlsRef.current = [];
        };
    }, []);

    return (
        <div className="h-full flex flex-col p-4 sm:p-6 lg:p-8 text-text-primary">
            <header className="mb-6">
                <h1 className="text-3xl font-bold flex items-center"><CloudIcon /><span className="ml-3">Static Deployment Previewer</span></h1>
                <p className="text-text-secondary mt-1">Live preview of the static site generated by the AI Feature Builder.</p>
            </header>
            <div className="flex-grow grid grid-cols-1 lg:grid-cols-3 gap-6 min-h-0">
                <div className="lg:col-span-1 bg-surface p-4 border border-border rounded-lg overflow-y-auto">
                    <h3 className="font-bold mb-2">Generated Files</h3>
                    {files.length > 0 ? (
                        <ul className="text-sm space-y-1">
                            {files.map(f => <li key={f.filePath} className="truncate p-1 bg-background rounded">{f.filePath}</li>)}
                        </ul>
                    ) : (
                        <p className="text-sm text-text-secondary">No files to display.</p>
                    )}
                </div>
                <div className="lg:col-span-2 bg-background border-2 border-dashed border-border rounded-lg overflow-hidden">
                    {isLoading && <div className="flex justify-center items-center h-full"><LoadingSpinner/></div>}
                    {error && <div className="flex justify-center items-center h-full text-red-500 p-4 text-center">{error}</div>}
                    {!isLoading && !error && files.length > 0 && (
                        <iframe
                            ref={iframeRef}
                            title="Deployment Preview"
                            className="w-full h-full bg-white"
                            sandbox="allow-scripts" // Allow scripts to run for interactive components
                        />
                    )}
                </div>
            </div>
        </div>
    );
};
