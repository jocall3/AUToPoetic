name: Build and Deploy AUToPoetic

on:
  push:
    branches: ["autocommit-all"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      # 2. Set Gemini API Key
      - name: Set Gemini API Key
        run: echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> $GITHUB_ENV

      # 3. Set GitHub PAT for private packages
      - name: Configure GitHub Token for npm
        run: echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_PAT }}" > ~/.npmrc

      # 4. Setup pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10

      # 5. Install dependencies
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      # 6. Ensure tsconfig.json for each package
      - name: Ensure package tsconfig.json
        run: |
          for pkg in packages/*; do
            if [[ ! -f "$pkg/tsconfig.json" ]]; then
              echo '{"compilerOptions":{"target":"ESNext","module":"ESNext","jsx":"react-jsx","declaration":true,"outDir":"dist","strict":true,"skipLibCheck":true},"include":["src","../../components","../../services"]}' > "$pkg/tsconfig.json"
            fi
            mkdir -p "$pkg/dist"
          done

      # 7. Build all packages individually
      - name: Build packages
        run: |
          for pkg in packages/*; do
            if [[ -f "$pkg/package.json" ]]; then
              name=$(jq -r .name "$pkg/package.json")
              echo "Building $name..."
              if pnpm --filter "$name" run build; then
                echo "$name build succeeded"
              else
                echo "$name build failed, skipping"
              fi
            fi
          done

      # 8. Build shell app (Vite)
      - name: Build Shell App
        run: pnpm --filter @devcore/shell run build

      # 9. Collect all outputs for Pages
      - name: Collect build output
        run: |
          mkdir -p all-dist
          # Root index.html
          cp index.html all-dist/
          # Public folder
          cp -r public/* all-dist/
          # Shell dist folder
          cp -r packages/shell/dist/* all-dist/
          # Packages dist folders
          for pkg in packages/*; do
            if [[ -d "$pkg/dist" ]]; then
              cp -r "$pkg/dist/." all-dist/
            fi
          done

      # 10. Upload Pages artifact
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: all-dist

      # 11. Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact-path: all-dist
