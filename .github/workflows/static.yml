name: Deploy static site to GitHub Pages with Gemini API

on:
  push:
    branches: ["autocommit-all"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1️⃣ Set Gemini API key first
      - name: Set Gemini API key
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "Gemini API key is set"
          echo "GEMINI_API_KEY=${GEMINI_API_KEY}" >> $GITHUB_ENV

      # 2️⃣ Checkout repo using PAT for private workspace packages
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          submodules: false

      # 3️⃣ Setup PNPM
      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: 10

      # 4️⃣ Install dependencies using lockfile
      - name: Install dependencies
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GH_PAT }}
        run: pnpm install --no-frozen-lockfile

      # 5️⃣ Type-check (optional)
      - name: Type check
        run: pnpm typecheck

      # 6️⃣ Call Gemini API
      - name: Call Gemini API
        run: |
          echo "Calling Gemini API..."
          STATUS=$(curl -s -o response.json -w "%{http_code}" \
            -H "x-goog-api-key: $GEMINI_API_KEY" \
            -H "Content-Type: application/json" \
            -X POST \
            -d '{
              "contents": [
                {
                  "parts": [
                    { "text": "Explain how AI works in a few words" }
                  ]
                }
              ]
            }' \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent")

          if [ "$STATUS" != "200" ]; then
            echo "Gemini API call failed with status $STATUS"
            cat response.json
            exit 1
          fi

          echo "Gemini API call succeeded"
          cat response.json

      # 7️⃣ Build static app
      - name: Build static app
        run: pnpm build

      # 8️⃣ Upload artifact for deployment
      - name: Upload build artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      # Deploy the artifact to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
