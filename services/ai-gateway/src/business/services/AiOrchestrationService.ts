import {AiRequestPayload,AiResponsePayload,StreamChunk,StructuredExplanation,ColorTheme,SemanticColorTheme,StructuredPrSummary,GeneratedFile,CronParts,SecurityVulnerability,CodeSmell,CustomFeatureMetadata,StructuredReview,ProjectPlan,ArchitectureBlueprint,JwtPayload,FinancialReport,BuildOptimization,SecurityRecommendation,CodeMetric,ComplianceReport,MicroserviceContract} from '../../core/models/ai-models';import {IAiAdapter} from '../../core/ports/ai-adapter';import {ILogger} from '../../core/ports/logger';import {IAiProviderFactory} from './AiProviderFactory';export class AiOrchestrationService {private readonly logger: ILogger;private readonly aiProviderFactory: IAiProviderFactory;/** * @constructor * @param {ILogger} logger - An instance of a logger service. * @param {IAiProviderFactory} aiProviderFactory - A factory to create or retrieve AI provider adapters. * @security No direct access to AI API keys. Keys are managed by the factory/adapters via a secrets manager. * @performance Initializes dependencies. */constructor(logger: ILogger,aiProviderFactory: IAiProviderFactory,) {this.logger = logger;this.aiProviderFactory = aiProviderFactory;this.logger.info('AiOrchestrationService initialized. Ready to orchestrate AI requests from BFF.');}/** * @method _getAdapter * @description Internal helper to retrieve the correct AI adapter based on the provider type in the request payload. * @param {AiRequestPayload} request - The AI request payload. * @returns {IAiAdapter} The appropriate AI adapter instance. * @throws {Error} If the provider type is missing from the request or not recognized by the factory. * @security Ensures requests are routed to configured and valid AI providers. * @performance Direct lookup from factory. */private _getAdapter(request: AiRequestPayload): IAiAdapter {if (!request.providerType) {const error = new Error('Provider type is required in the AI request payload.');this.logger.error(error, {request});throw error;}return this.aiProviderFactory.getProvider(request.providerType);}/** * @method _handleStreamError * @description Handles errors during streaming, logs them, and yields an error chunk. * @param {Error} error - The error encountered. * @param {AiRequestPayload} request - The original request payload. * @yields {StreamChunk} An error chunk for the client. */private async *_handleStreamError(error: Error, request: AiRequestPayload): AsyncGenerator<StreamChunk> {this.logger.error(error, {request, message: 'Error during AI streaming operation.'});yield {content: `Error: ${error.message}`, metadata: {isError: true, code: (error as any).code}};}/** * @method generateContent * @description Orchestrates the generation of AI content based on a textual prompt. * @param {AiRequestPayload} request - The AI request payload. Must include `prompt` and `providerType`. * @returns {Promise<AiResponsePayload>} A promise that resolves to the generated content and metadata. * @throws {Error} If content generation fails. * @security Delegates API key handling to the underlying adapter. * @performance Routes to appropriate adapter; internal adapter handles retries/timeouts. * @example * ```typescript * const request = { *   providerType: 'google-gemini', *   model: 'gemini-pro', *   prompt: 'Write a short story about a dragon who loves to code.', *   temperature: 0.7 * }; * const response = await aiOrchestrationService.generateContent(request); * console.log(response.content); * ``` */async generateContent(request: AiRequestPayload): Promise<AiResponsePayload> {this.logger.info('Orchestrating AI content generation.', {model: request.model, providerType: request.providerType});const adapter = this._getAdapter(request);return adapter.generateContent(request);}/** * @method streamContent * @description Orchestrates the streaming generation of AI content. * @param {AiRequestPayload} request - The AI request payload. Must include `prompt` and `providerType`. * @returns {AsyncGenerator<StreamChunk>} An async generator that yields chunks of the AI response. * @throws {Error} If the streaming setup fails. * @security Delegates API key handling to the underlying adapter. * @performance Routes to appropriate adapter for streaming. * @example * ```typescript * const request = { *   providerType: 'openai', *   model: 'gpt-4o', *   prompt: 'Write a long poem about the beauty of cloud computing.' * }; * for await (const chunk of aiOrchestrationService.streamContent(request)) { *   process.stdout.write(chunk.content); * } * ``` */async *streamContent(request: AiRequestPayload): AsyncGenerator<StreamChunk> {this.logger.info('Orchestrating AI streaming content generation.', {model: request.model, providerType: request.providerType});try {const adapter = this._getAdapter(request);yield* adapter.streamContent(request);} catch (error: any) {yield* this._handleStreamError(error, request);}}/** * @method generateJson * @description Orchestrates the generation of JSON content from an AI model based on a schema. * @template T The expected type of the JSON response. * @param {AiRequestPayload} request - The AI request payload. Must include `prompt`, `providerType`, and `responseSchema`. * @returns {Promise<T>} A promise that resolves to the parsed JSON object. * @throws {Error} If JSON generation or parsing fails. * @security Delegates API key handling to the underlying adapter, schema enforcement by AI. * @performance Routes to appropriate adapter. * @example * ```typescript * const request = { *   providerType: 'google-gemini', *   model: 'gemini-pro', *   prompt: 'Describe a user with name, email, and age.', *   responseSchema: { type: 'object', properties: { name: { type: 'string' }, email: { type: 'string' }, age: { type: 'number' } } } * }; * const user = await aiOrchestrationService.generateJson<{ name: string; email: string; age: number }>(request); * console.log(user); * ``` */async generateJson<T>(request: AiRequestPayload): Promise<T> {this.logger.info('Orchestrating AI JSON generation.', {model: request.model, providerType: request.providerType});const adapter = this._getAdapter(request);return adapter.generateJson<T>(request);}/** * @method generateAppFeatureComponent * @description Orchestrates the generation of a new, self-contained React functional component. * @param {AiRequestPayload} request - The AI request payload. Must include `prompt` (feature description) and `providerType`. * @returns {Promise<Omit<CustomFeatureMetadata, 'id'>>} A promise resolving to the generated component's metadata. * @throws {Error} If component generation fails. * @security Content generated by AI, review is critical. * @performance Uses a JSON generation adapter. */async generateAppFeatureComponent(request: AiRequestPayload): Promise<Omit<CustomFeatureMetadata, 'id'>> {this.logger.info('Orchestrating AI app feature component generation.', {providerType: request.providerType});const systemInstruction = 